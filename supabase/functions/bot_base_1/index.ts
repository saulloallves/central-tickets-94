import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// Cliente Supabase com ANON_KEY (para opera√ß√µes gerais)
const supabase = createClient(Deno.env.get("SUPABASE_URL") ?? "", Deno.env.get("SUPABASE_ANON_KEY") ?? "");

// Cliente Supabase com SERVICE_ROLE_KEY (para bypass RLS em webhooks)
const supabaseAdmin = createClient(Deno.env.get("SUPABASE_URL") ?? "", Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "");

// ‚úÖ Usando banco principal - tabela atendente_unidades migrada

// Configura√ß√£o Z-API espec√≠fica para BOT
class BotZAPIClient {
  private instanceId: string;
  private token: string;
  private clientToken: string;
  private baseUrl: string;

  constructor() {
    this.instanceId = "";
    this.token = "";
    this.clientToken = "";
    this.baseUrl = "https://api.z-api.io";
  }

  async loadConfig() {
    console.log("üîß Carregando configura√ß√£o do bot...");

    // Primeiro, tenta buscar da configura√ß√£o do banco
    try {
      const { data: config, error } = await supabase
        .from("messaging_providers")
        .select("instance_id, instance_token, client_token, base_url")
        .eq("provider_name", "zapi_bot")
        .eq("is_active", true)
        .maybeSingle();

      if (!error && config && config.instance_id) {
        console.log("‚úÖ Configura√ß√£o encontrada no banco:", config.instance_id?.substring(0, 8) + "...");
        this.instanceId = config.instance_id;
        this.token = config.instance_token;
        this.clientToken = config.client_token;
        this.baseUrl = config.base_url || "https://api.z-api.io";
        return;
      } else {
        console.log(
          "‚ö†Ô∏è Configura√ß√£o n√£o encontrada no banco, usando env vars:",
          error?.message || "Config n√£o encontrada",
        );
      }
    } catch (error) {
      console.error("‚ùå Erro ao buscar configura√ß√£o no banco:", error);
    }

    // Fallback para vari√°veis de ambiente
    this.instanceId = Deno.env.get("BOT_ZAPI_INSTANCE_ID") || Deno.env.get("ZAPI_INSTANCE_ID") || "";
    this.token = Deno.env.get("BOT_ZAPI_TOKEN") || Deno.env.get("ZAPI_TOKEN") || "";
    this.clientToken = Deno.env.get("BOT_ZAPI_CLIENT_TOKEN") || Deno.env.get("ZAPI_CLIENT_TOKEN") || "";
    this.baseUrl = Deno.env.get("BOT_ZAPI_BASE_URL") || Deno.env.get("ZAPI_BASE_URL") || "https://api.z-api.io";

    console.log("üìù Usando configura√ß√£o das env vars:", this.instanceId?.substring(0, 8) + "...");
  }

  async sendMessage(phone: string, message: string, buttons?: any[]): Promise<boolean> {
    if (!this.instanceId || !this.token || !this.clientToken) {
      console.error("BOT Z-API credentials not configured");
      return false;
    }

    try {
      let endpoint = "send-text";
      let body: any = {
        phone: phone,
        message: message,
      };

      if (buttons && buttons.length > 0) {
        endpoint = "send-button-list";
        body.buttonList = { buttons };
      }

      const response = await fetch(`${this.baseUrl}/instances/${this.instanceId}/token/${this.token}/${endpoint}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Client-Token": this.clientToken,
        },
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        console.error("Failed to send BOT Z-API message:", await response.text());
        return false;
      }

      console.log("‚úÖ BOT message sent successfully via Z-API");
      return true;
    } catch (error) {
      console.error("Error sending BOT Z-API message:", error);
      return false;
    }
  }

  isConfigured(): boolean {
    return !!(this.instanceId && this.token && this.clientToken);
  }
}

const botZapi = new BotZAPIClient();

// ‚úÖ Fun√ß√£o para verificar se grupo existe em unidades_whatsapp
async function checkGroupInWhatsappTable(groupId: string): Promise<{
  exists: boolean;
  codigoGrupo?: string;
  nomeGrupo?: string;
}> {
  try {
    console.log(`üì± Verificando grupo ${groupId} na tabela unidades_whatsapp...`);

    const { data, error } = await supabaseAdmin
      .from("unidades_whatsapp")
      .select("codigo_grupo, nome_grupo")
      .eq("id_grupo_branco", groupId)
      .maybeSingle();

    if (error) {
      console.error("‚ùå Erro ao consultar unidades_whatsapp:", error);
      return { exists: false };
    }

    if (data) {
      console.log(`‚úÖ Grupo encontrado em unidades_whatsapp: ${data.nome_grupo} (c√≥digo: ${data.codigo_grupo})`);
      return {
        exists: true,
        codigoGrupo: data.codigo_grupo,
        nomeGrupo: data.nome_grupo,
      };
    }

    console.log(`üö´ Grupo N√ÉO encontrado em unidades_whatsapp`);
    return { exists: false };
  } catch (error) {
    console.error("‚ùå Erro na verifica√ß√£o de unidades_whatsapp:", error);
    return { exists: false };
  }
}

// ‚úÖ Fun√ß√£o corrigida - sintaxe correta do Supabase
async function checkGroupInDatabase(groupId: string): Promise<boolean> {
  try {
    console.log(`üîç Verificando grupo ${groupId} na tabela atendente_unidades...`);
    console.log(`üîç Buscando por id_grupo_branco: "${groupId}"`);
    console.log(`üîë Usando SERVICE_ROLE_KEY para bypass de RLS (webhook n√£o tem auth)`);

    // Usar supabaseAdmin para bypass de RLS (webhooks n√£o t√™m auth.uid())
    const { data, error, count } = await supabaseAdmin
      .from("atendente_unidades")
      .select("id, codigo_grupo, id_grupo_branco, grupo, ativo", { count: "exact" })
      .eq("id_grupo_branco", groupId)
      .eq("ativo", true);

    console.log(`üìä Query completa - Error:`, error);
    console.log(`üìä Query completa - Count:`, count);
    console.log(`üìä Query completa - Data length:`, data?.length || 0);

    if (error) {
      console.error("‚ùå Erro ao consultar tabela atendente_unidades:", error);
      return false;
    }

    if (data && data.length > 0) {
      console.log(
        `‚úÖ Grupo ${groupId} encontrado! Registro(s):`,
        data.map((d) => `${d.grupo} (c√≥digo: ${d.codigo_grupo}, id_branco: ${d.id_grupo_branco})`),
      );
      return true;
    } else {
      console.log(`üö´ Grupo N√ÉO encontrado para id_grupo_branco: "${groupId}"`);
      return false;
    }
  } catch (error) {
    console.error("‚ùå Erro na verifica√ß√£o de grupo:", error);
    return false;
  }
}

// Nova fun√ß√£o para verificar se a unidade est√° cadastrada
async function checkUnitRegistration(groupId: string): Promise<{
  isRegistered: boolean;
  codigoGrupo?: string;
  nomeGrupo?: string;
}> {
  try {
    console.log(`üè¢ Verificando cadastro da unidade para grupo ${groupId}...`);

    const { data, error } = await supabaseAdmin
      .from("unidades")
      .select("codigo_grupo, grupo, id_grupo_branco")
      .eq("id_grupo_branco", groupId)
      .maybeSingle();

    if (error) {
      console.error("‚ùå Erro ao verificar cadastro da unidade:", error);
      return { isRegistered: false };
    }

    if (data) {
      console.log(`‚úÖ Unidade cadastrada: ${data.grupo} (c√≥digo: ${data.codigo_grupo})`);
      return {
        isRegistered: true,
        codigoGrupo: data.codigo_grupo,
        nomeGrupo: data.grupo,
      };
    }

    // Buscar informa√ß√µes em atendente_unidades para a mensagem
    const { data: atendenteData } = await supabaseAdmin
      .from("atendente_unidades")
      .select("codigo_grupo, grupo")
      .eq("id_grupo_branco", groupId)
      .maybeSingle();

    console.log(`üö´ Unidade N√ÉO cadastrada no sistema`);
    return {
      isRegistered: false,
      codigoGrupo: atendenteData?.codigo_grupo,
      nomeGrupo: atendenteData?.grupo,
    };
  } catch (error) {
    console.error("‚ùå Erro ao verificar cadastro da unidade:", error);
    return { isRegistered: false };
  }
}

// Fun√ß√£o para enviar notifica√ß√£o de grupo n√£o autorizado
async function sendUnauthorizedGroupNotification(groupId: string) {
  try {
    console.log(`üì¢ Enviando notifica√ß√£o para grupo n√£o autorizado: ${groupId}`);

    const functionsBaseUrl =
      Deno.env.get("FUNCTIONS_BASE_URL") || `https://hryurntaljdisohawpqf.supabase.co/functions/v1`;

    const response = await fetch(`${functionsBaseUrl}/create-internal-notification`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${Deno.env.get("SUPABASE_ANON_KEY")}`,
      },
      body: JSON.stringify({
        title: "üö´ Grupo n√£o autorizado tentou usar o bot",
        message: `O grupo ${groupId} tentou usar o bot_base_1 mas n√£o est√° cadastrado na tabela atendente_unidades`,
        type: "alert",
        payload: {
          group_id: groupId,
          timestamp: new Date().toISOString(),
          function: "bot_base_1",
        },
      }),
    });

    if (!response.ok) {
      console.error("‚ùå Erro ao enviar notifica√ß√£o:", await response.text());
    } else {
      console.log("‚úÖ Notifica√ß√£o enviada com sucesso");
    }
  } catch (error) {
    console.error("‚ùå Erro ao enviar notifica√ß√£o de grupo n√£o autorizado:", error);
  }
}

serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  // Carrega configura√ß√£o do banco primeiro
  console.log("üîß Carregando configura√ß√£o do bot...");
  await botZapi.loadConfig();
  console.log("‚úÖ Configura√ß√£o carregada, bot est√° configurado:", botZapi.isConfigured());

  try {
    console.log("üöÄ BOT_BASE_1 INICIADO - Recebendo requisi√ß√£o");
    console.log("üåç Request URL:", req.url);
    console.log("üìù Request method:", req.method);

    const body = await req.json();
    console.log("üì¶ Body parseado:", JSON.stringify(body, null, 2));

    // üö´ FILTRO: Ignorar mensagens enviadas pelo pr√≥prio bot
    if (body?.fromMe === true) {
      console.log("‚è≠Ô∏è Ignorando mensagem do pr√≥prio bot (fromMe: true)");
      return new Response(
        JSON.stringify({ success: true, message: "Ignored: message from bot itself" }),
        { headers: { "Content-Type": "application/json", ...corsHeaders }, status: 200 }
      );
    }

    // Tenta extrair buttonId de v√°rias formas poss√≠veis
    const buttonId1 = body?.buttonsResponseMessage?.buttonId;
    const buttonId2 = body?.buttonId;
    const buttonId3 = body?.button?.id;
    const buttonId4 = body?.selectedButtonId;

    const buttonId = buttonId1 || buttonId2 || buttonId3 || buttonId4 || "";

    // Extrai phone e message
    const phone = body?.phone || body?.participantPhone;
    const message = (body?.text?.message || body?.message || "").toLowerCase();

    console.log("üîç DADOS EXTRA√çDOS:");
    console.log("Phone:", phone);
    console.log("ButtonId:", buttonId);
    console.log("Message:", message);

    const isGroup = body?.isGroup;
    const chatId = body?.phone;

    // Palavras-chave que disparam menu inicial
    const KEYWORDS = [
      "testerobo",
      "testerob√¥",
      "menu",
      "men√∫",
      "robo",
      "rob√¥",
      "ola robo",
      "ola rob√¥",
      "ol√° robo",
      "ol√° rob√¥"
    ];

    const functionsBaseUrl =
      Deno.env.get("FUNCTIONS_BASE_URL") || `https://hryurntaljdisohawpqf.supabase.co/functions/v1`;

    // üîπ MENU INICIAL - Verifica√ß√£o EXATA (n√£o frases que contenham)
    console.log("üîç Verificando keywords:", KEYWORDS);
    console.log("üîç Message para verificar:", `"${message}"`);
    const keywordMatch = KEYWORDS.some((k) => message.trim().toLowerCase() === k.toLowerCase());
    console.log("üîç Keyword match encontrado:", keywordMatch);

    if (keywordMatch) {
      // FILTRO DIN√ÇMICO: Verificar grupos quando usar palavras-chave
      if (isGroup) {
        // 1Ô∏è‚É£ PRIMEIRA VALIDA√á√ÉO: Grupo autorizado em atendente_unidades
        const isAuthorized = await checkGroupInDatabase(chatId);

        if (!isAuthorized) {
          console.log(`üö´ BOT_BASE_1: Grupo n√£o autorizado em atendente_unidades (${chatId})`);
          
          // Verificar se existe em unidades_whatsapp
          const whatsappCheck = await checkGroupInWhatsappTable(chatId);
          
          if (whatsappCheck.exists) {
            console.log(`üì± Grupo encontrado em unidades_whatsapp - enviando orienta√ß√£o de cadastro`);
            
            // Enviar mensagem de orienta√ß√£o de cadastro
            const message = `üö´ *Unidade n√£o vinculada*\n\n` +
              `Ol√°! Identificamos que esta unidade ainda n√£o est√° vinculada ao sistema.\n\n` +
              `üìã *C√≥digo da unidade:* ${whatsappCheck.codigoGrupo || "N√£o identificado"}\n` +
              `üè¢ *Nome:* ${whatsappCheck.nomeGrupo || "N√£o identificado"}\n\n` +
              `Para utilizar o bot, √© necess√°rio completar o cadastro da unidade.\n\n` +
              `üëâ *Acesse:* cadastro.girabot.com.br\n\n` +
              `Ap√≥s o cadastro, voc√™ poder√° usar todas as funcionalidades do bot! ü§ñ`;

            await botZapi.sendMessage(chatId, message);

            // Enviar notifica√ß√£o interna
            try {
              await fetch(`${functionsBaseUrl}/create-internal-notification`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${Deno.env.get("SUPABASE_ANON_KEY")}`,
                },
                body: JSON.stringify({
                  title: "‚ö†Ô∏è Grupo n√£o vinculado tentou usar o bot",
                  message: `Grupo ${whatsappCheck.nomeGrupo || chatId} (c√≥digo: ${whatsappCheck.codigoGrupo || "N/A"}) existe em unidades_whatsapp mas n√£o est√° vinculado em atendente_unidades`,
                  type: "alert",
                  payload: {
                    group_id: chatId,
                    codigo_grupo: whatsappCheck.codigoGrupo,
                    nome_grupo: whatsappCheck.nomeGrupo,
                    timestamp: new Date().toISOString(),
                    function: "bot_base_1",
                    needs_linking: true,
                  },
                }),
              });
            } catch (notificationError) {
              console.error("‚ùå Erro ao enviar notifica√ß√£o interna:", notificationError);
            }

            return new Response(
              JSON.stringify({
                success: false,
                message: "Group exists but not linked - registration required",
                codigo_grupo: whatsappCheck.codigoGrupo,
                nome_grupo: whatsappCheck.nomeGrupo,
              }),
              {
                headers: { "Content-Type": "application/json", ...corsHeaders },
                status: 403,
              },
            );
    } else {
      console.log(`üö´ Grupo completamente n√£o autorizado - n√£o existe em nenhuma tabela`);
      
      // Enviar mensagem ao grupo informando que n√£o est√° cadastrado
      const notRegisteredMessage = `üö´ *Grupo n√£o cadastrado*\n\n` +
        `Ol√°! Este grupo ainda n√£o est√° cadastrado no sistema Girabot.\n\n` +
        `Para utilizar o bot, √© necess√°rio realizar o cadastro completo da sua unidade.\n\n` +
        `üëâ *Acesse:* cadastro.girabot.com.br\n\n` +
        `Ap√≥s o cadastro, voc√™ ter√° acesso a todas as funcionalidades do bot! ü§ñ\n\n` +
        `_Se voc√™ j√° realizou o cadastro, entre em contato com o suporte._`;

      await botZapi.sendMessage(chatId, notRegisteredMessage);
      
      // Continuar enviando notifica√ß√£o interna para admins
      await sendUnauthorizedGroupNotification(chatId);

      return new Response(
        JSON.stringify({
          success: false,
          message: "Group not registered - message sent to group",
          group_id: chatId,
        }),
        {
          headers: { "Content-Type": "application/json", ...corsHeaders },
          status: 403,
        },
      );
    }
        }

        console.log("‚úÖ BOT_BASE_1: Grupo autorizado - verificando cadastro da unidade");

        // 2Ô∏è‚É£ SEGUNDA VALIDA√á√ÉO: Unidade cadastrada em 'unidades'
        const unitCheck = await checkUnitRegistration(chatId);

        if (!unitCheck.isRegistered) {
          console.log(`üö´ BOT_BASE_1: Unidade n√£o cadastrada (${chatId})`);

          // Enviar mensagem no grupo informando sobre falta de cadastro
          const message = `üö´ *Unidade n√£o cadastrada*\n\n` +
            `Ol√°! Identificamos que esta unidade ainda n√£o possui cadastro completo no sistema.\n\n` +
            `üìã *C√≥digo da unidade:* ${unitCheck.codigoGrupo || "N√£o identificado"}\n` +
            `üè¢ *Nome:* ${unitCheck.nomeGrupo || "N√£o identificado"}\n\n` +
            `Para utilizar o bot, √© necess√°rio completar o cadastro da unidade.\n\n` +
            `üëâ *Acesse:* cadastro.girabot.com.br\n\n` +
            `Ap√≥s o cadastro, voc√™ poder√° usar todas as funcionalidades do bot! ü§ñ`;

          await botZapi.sendMessage(chatId, message);

          // Enviar notifica√ß√£o interna para admins
          try {
            await fetch(`${functionsBaseUrl}/create-internal-notification`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${Deno.env.get("SUPABASE_ANON_KEY")}`,
              },
              body: JSON.stringify({
                title: "‚ö†Ô∏è Grupo sem cadastro de unidade tentou usar o bot",
                message: `Grupo ${unitCheck.nomeGrupo || chatId} (c√≥digo: ${unitCheck.codigoGrupo || "N/A"}) tentou usar o bot mas n√£o tem cadastro na tabela unidades`,
                type: "alert",
                payload: {
                  group_id: chatId,
                  codigo_grupo: unitCheck.codigoGrupo,
                  nome_grupo: unitCheck.nomeGrupo,
                  timestamp: new Date().toISOString(),
                  function: "bot_base_1",
                  missing_registration: true,
                },
              }),
            });
          } catch (notificationError) {
            console.error("‚ùå Erro ao enviar notifica√ß√£o interna:", notificationError);
          }

          return new Response(
            JSON.stringify({
              success: false,
              message: "Unit not registered in system",
              codigo_grupo: unitCheck.codigoGrupo,
              nome_grupo: unitCheck.nomeGrupo,
            }),
            {
              headers: { "Content-Type": "application/json", ...corsHeaders },
              status: 403,
            },
          );
        }

        console.log(`‚úÖ BOT_BASE_1: Unidade cadastrada - ${unitCheck.nomeGrupo} (${unitCheck.codigoGrupo})`);
      } else {
        console.log("üì± BOT_BASE_1: Mensagem privada - prosseguindo para menu");
      }

      console.log("üìû Chamando menu_principal...");
      const res = await fetch(`${functionsBaseUrl}/menu_principal`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${Deno.env.get("SUPABASE_ANON_KEY")}`,
        },
        body: JSON.stringify(body),
      });

      const responseText = await res.text();
      console.log("üì§ Resposta do menu_principal:", responseText);

      return new Response(responseText, {
        headers: { "Content-Type": "application/json", ...corsHeaders },
        status: res.status,
      });
    }

    // üîπ AUTOATENDIMENTO (Menu principal)
    if (buttonId === "autoatendimento_menu") {
      const res = await fetch(`${functionsBaseUrl}/autoatendimento`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${Deno.env.get("SUPABASE_ANON_KEY")}`,
        },
        body: JSON.stringify(body),
      });
      return new Response(await res.text(), {
        headers: { "Content-Type": "application/json", ...corsHeaders },
        status: res.status,
      });
    }

    // üîπ SUBMENUS DO AUTOATENDIMENTO

    // Calend√°rio
    if (buttonId === "autoatendimento_calendario") {
      return await proxy(functionsBaseUrl, "autoatendimento_calendario", body);
    }
    if (buttonId === "autoatendimento_midias") {
      console.log("üñºÔ∏è MATCH! REDIRECIONANDO PARA autoatendimento_midias");
      return await proxy(functionsBaseUrl, "autoatendimento_midias", body);
    }
    if (buttonId === "autoatendimento_ticket") {
      // Redireciona para autoatendimento padr√£o (mensagem de boas-vindas + senha)
      return await proxy(functionsBaseUrl, "autoatendimento", body);
    }
    if (buttonId === "autoatendimento_nao_sei_senha") {
      return await proxy(functionsBaseUrl, "autoatendimento_nao_sei_senha", body);
    }
    if (buttonId === "autoatendimento_ouvidoria") {
      return await proxy(functionsBaseUrl, "autoatendimento_ouvidoria", body);
    }
    if (buttonId === "autoatendimento_manuais") {
      return await proxy(functionsBaseUrl, "autoatendimento_manuais", body);
    }
    if (buttonId === "outras_opcoes") {
      return await proxy(functionsBaseUrl, "outras_opcoes", body);
    }

    // üîπ NOVOS MENUS PRINCIPAIS
    if (buttonId === "personalizado_menu") {
      return await proxy(functionsBaseUrl, "personalizado_menu", body);
    }
    if (buttonId === "suporte_dfcom") {
      return await proxy(functionsBaseUrl, "suporte_dfcom", body);
    }
    if (buttonId === "falar_com_concierge" || buttonId === "concierge_falar") {
      return await proxy(functionsBaseUrl, "concierge_falar", body);
    }
    if (buttonId === "acompanhar_chamado") {
      return await proxy(functionsBaseUrl, "acompanhar_chamado", body);
    }
    if (buttonId === "emergencia_menu") {
      return await proxy(functionsBaseUrl, "emergencia_menu", body);
    }
    if (buttonId === "emergencia_finalizar") {
      return await proxy(functionsBaseUrl, "emergencia_finalizar", body);
    }
    if (buttonId === "personalizado_finalizar") {
      return await proxy(functionsBaseUrl, "personalizado_finalizar", body);
    }

    // üîπ DFCOM FUNCTIONS
    if (buttonId === "falar_com_dfcom") {
      return await proxy(functionsBaseUrl, "falar_com_dfcom", body);
    }
    if (buttonId === "finalizar_atendimento_dfcom") {
      return await proxy(functionsBaseUrl, "finalizar_atendimento_dfcom", body);
    }

    // üîπ VOLTAR AO MENU INICIAL
    if (buttonId === "voltar_menu_inicial") {
      const res = await fetch(`${functionsBaseUrl}/menu_principal`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${Deno.env.get("SUPABASE_ANON_KEY")}`,
        },
        body: JSON.stringify(body),
      });
      return new Response(await res.text(), {
        headers: { "Content-Type": "application/json", ...corsHeaders },
        status: res.status,
      });
    }

    // üîπ RESPONDER TICKET
    if (buttonId.startsWith("responder_ticket_")) {
      return await proxy(functionsBaseUrl, "process-ticket-response", body);
    }

    // üîπ FINALIZAR TICKET
    if (buttonId.startsWith("finalizar_ticket_")) {
      return await proxy(functionsBaseUrl, "process-ticket-response", body);
    }

    // üîπ PROCESSAR AVALIA√á√ÉO
    if (buttonId.startsWith("avaliacao_")) {
      console.log("‚≠ê Processando avalia√ß√£o:", buttonId);
      return await proxy(functionsBaseUrl, "processar-avaliacao-atendimento", body);
    }

    // ‚ùå Pula DFCom por enquanto
    if (buttonId === "autoatendimento_dfcom") {
      console.log("üö´ DFCom desativado por enquanto");
      return new Response(JSON.stringify({ success: false, message: "DFCom ainda n√£o implementado" }), {
        headers: { "Content-Type": "application/json", ...corsHeaders },
        status: 200,
      });
    }

    // Caso n√£o reconhe√ßa
    console.log("‚è≠Ô∏è NENHUMA CONDI√á√ÉO ATENDIDA - ButtonId:", buttonId, "Message:", message);
    console.log("‚è≠Ô∏è Ignorando requisi√ß√£o");
    return new Response(JSON.stringify({ success: true, ignored: true, buttonId, message }), {
      headers: { "Content-Type": "application/json", ...corsHeaders },
      status: 200,
    });
  } catch (err) {
    console.error("‚ùå Erro no bot_base_1:", err);
    return new Response(JSON.stringify({ error: "Erro interno", details: err.message }), {
      headers: { "Content-Type": "application/json", ...corsHeaders },
      status: 500,
    });
  }
});

// üîß Fun√ß√£o helper para redirecionar chamadas
async function proxy(baseUrl: string, functionName: string, body: any) {
  try {
    console.log(`üîÑ Redirecionando para ${functionName}`);
    const res = await fetch(`${baseUrl}/${functionName}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${Deno.env.get("SUPABASE_ANON_KEY")}`,
      },
      body: JSON.stringify(body),
    });

    const responseText = await res.text();
    console.log(`üì§ Resposta de ${functionName}:`, res.status, responseText.substring(0, 200));

    return new Response(responseText, {
      headers: { "Content-Type": "application/json", ...corsHeaders },
      status: res.status,
    });
  } catch (error) {
    console.error(`‚ùå Erro no proxy para ${functionName}:`, error);
    return new Response(JSON.stringify({ error: `Erro no proxy para ${functionName}`, details: error.message }), {
      headers: { "Content-Type": "application/json", ...corsHeaders },
      status: 500,
    });
  }
}
