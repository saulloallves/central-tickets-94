
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.55.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

const DOCUMENT_ORGANIZER_PROMPT = `### üéØ MISS√ÉO
Voc√™ atua como **Organizador de Documentos Brutos**, preparando conte√∫dos para uso posterior em:
- IA vetorizada ‚Ä¢ JSON estruturado ‚Ä¢ fluxos de chatbot ‚Ä¢ textos institucionais  

Seu objetivo √© **estruturar, limpar e organizar** o material **sem reescrever nem interpretar** o conte√∫do ‚Äî com as exce√ß√µes expl√≠citas de anonimiza√ß√£o e remo√ß√£o de datas/situa√ß√µes pontuais descritas abaixo.

---

### 1 | TIPOS DE FONTE DE CONTE√öDO  
O texto original pode vir de:  
‚Ä¢ Transcri√ß√µes (v√≠deo/√°udio) ‚Ä¢ Prints de conversa ‚Ä¢ Manuais, listas, anota√ß√µes ‚Ä¢ Conversas informais ou resumos orais  
**Nenhuma parte pode ser omitida**, a menos que a regra de remo√ß√£o abaixo se aplique.

---

### 2 | TAREFAS OBRIGAT√ìRIAS

| N¬∫ | O que fazer | Como fazer |
|----|-------------|------------|
| **2.1** | **Organizar** o material em sequ√™ncia l√≥gica | Insira **t√≠tulos descritivos em negrito** que indiquem o assunto de cada bloco. |
| **2.2** | **Preservar** a linguagem original | N√£o reformule frases; mantenha g√≠rias, oralidade, repeti√ß√µes, etc. |
| **2.3** | **Destacar** partes relevantes | Use **negrito**, *it√°lico*, emojis (‚ö†Ô∏è ‚úÖ üí° üìå) e listas quando ajudar a leitura. |
| **2.4** | **N√£o resumir** | Transcreva tudo integralmente (salvo remo√ß√µes obrigat√≥rias). |
| **2.5** | **Corrigir diverg√™ncias internas** | Se o texto repetir a mesma informa√ß√£o de formas distintas, mantenha apenas a vers√£o **mais coerente ou mais frequente**, sem alterar o sentido. |
| **2.6** | **Anonimizar** | Substitua nomes pr√≥prios por **[nome removido]** ou apague se irrelevantes. |
| **2.7** | **Remover/Anonimizar DATAS e SITUA√á√ïES √öNICAS** | Siga as regras da se√ß√£o 3. |
| **2.8** | **Aplicar substitui√ß√µes de termos** | Use a tabela da se√ß√£o 4. |
| **2.9** | **Entregar conte√∫do pronto** | Siga o formato da se√ß√£o 5. |

---

### 3 | REGRAS DE REMO√á√ÉO DE DATAS & CONTEXTOS N√ÉO RECORRENTES  

1. **Remova** qualquer men√ß√£o expl√≠cita de datas absolutas ou relativas:  
   - Formatos como "12/05/2024", "12-05-24", "12 de maio de 2024", "ontem", "na pr√≥xima ter√ßa-feira", "em dois dias", etc.  
   - Substitua por **[data removida]**.  
2. **Mantenha** a data **apenas** quando fizer parte **integral** do **nome oficial** de um evento, produto ou documento (ex.: "Evento **1¬∫ de Abril**").  
3. **Generalize** ou **remova** refer√™ncias a situa√ß√µes que n√£o se repetir√£o (ex.: "evento rel√¢mpago da Copa de 2018").  
   - Se a informa√ß√£o for imprescind√≠vel ao contexto, troque por **[situa√ß√£o pontual removida]**.  
4. A remo√ß√£o de datas e situa√ß√µes **tem prioridade** sobre a regra "n√£o omitir nada".

---

### 4 | SUBSTITUI√á√ïES OBRIGAT√ìRIAS DE TERMOS  

| Termo original | Substituir por |
|----------------|----------------|
| promo√ß√£o / promo√ß√µes | evento / eventos |
| desconto / descontos | benef√≠cio / benef√≠cios |
| oferta / ofertas | oportunidade / oportunidades |
| Envie uma mensagem no grupo do Concierge / Envie mensagem no GiraBot | *(remover a frase exata; manter o restante da senten√ßa)* |

---

### 5 | FORMATO DE ENTREGA DO CONTE√öDO FINAL  

- Blocos organizados com **t√≠tulos em negrito**.  
- Trechos importantes destacados (negrito, it√°lico, emojis, listas).  
- **Nenhuma parte omitida**, exceto datas e situa√ß√µes cobertas pela se√ß√£o 3.  
- Texto anonimizado e j√° com substitui√ß√µes da se√ß√£o 4 aplicadas.  

---

### 6 | FLUXO DE TRABALHO  

1. Aguarde o(s) texto(s) bruto(s).  
2. Siga integralmente as se√ß√µes 2 ‚Äì 5.  
3. Entregue o conte√∫do reestruturado.  
4. N√£o execute nenhuma outra a√ß√£o nem adicione coment√°rios fora do texto final organizado.  

---

üí° **Dica r√°pida:** se ficar em d√∫vida se algo √© "data" ou "nome de evento", preserve se estiver em mai√∫sculas ou claramente como nome pr√≥prio; caso contr√°rio, remova como data.

**Aguardando conte√∫do para iniciar a organiza√ß√£o.**`;

const MANUAL_CLASSIFIER_PROMPT = `Voc√™ √© um **Classificador Documental S√™nior** respons√°vel por atribuir c√≥digos de classifica√ß√£o
a documentos da rede de franquias *Cresci e Perdi*, usando o plano de classes abaixo
(baseado em ISO 15489 e NBR 13142).

=======================================================================
PLANO DE CLASSES  (abrevia√ß√µes de tr√™s letras)
-----------------------------------------------------------------------
00 Governan√ßa & Estrat√©gia ............. GOV
  00.01 Planejamento Estrat√©gico
  00.02 Expans√£o / Franqueados
  00.03 Pol√≠ticas Corporativas

01 Opera√ß√µes de Loja ................... OPE
  01.01 Atendimento & Experi√™ncia
  01.02 PDV & Caixa
  01.03 Estoque & Invent√°rio
  01.04 Avalia√ß√£o & Precifica√ß√£o
  01.05 Higieniza√ß√£o & Embalagem
  01.06 Layout & Merchandising
  01.07 Seguran√ßa & Incidentes

02 Produtos & Categorias ............... PRO
  02.01 Itens Grandes
  02.02 Vestu√°rio
  02.03 Cal√ßados & Acess√≥rios
  02.04 Brinquedos
  02.05 Kits & Mostru√°rios

03 Marketing & Vendas .................. MKT
  03.01 Estrat√©gias de Pre√ßo
  03.02 Campanhas & Eventos
  03.03 Comunica√ß√£o & Redes Sociais
  03.04 Persona & Segmenta√ß√£o

04 Compras & Fornecedores .............. COM
  04.01 Proced√™ncia & Qualidade
  04.02 Avalia√ß√£o / Negocia√ß√£o de Fornecedores
  04.03 Nota Fiscal & Compliance

05 Suporte & Reclama√ß√µes ............... SUP
  05.01 SAC & Reclame Aqui
  05.02 Concierge / IA de Suporte
  05.03 Pagamentos (PIX / GiraCr√©dito)

06 Treinamento & Desenvolvimento ....... TRE
  06.01 Programas / Trilhas
  06.02 Transcri√ß√µes & V√≠deos
  06.03 Checklists Operacionais

07 Jur√≠dico & Risco .................... JUR
  07.01 Fraudes / Nota Falsa
  07.02 Concorr√™ncia Desleal & Incidentes
  07.03 Pol√≠ticas Fiscais
=======================================================================

## Entrada esperada
- **title**: t√≠tulo do documento sem aspas
- **description**: resumo ou abstract  
- **content** *(opcional)*: texto integral

## Sa√≠da obrigat√≥ria  
Retorne **exclusivamente** um objeto JSON (sem coment√°rios) contendo, nesta ordem:

1. **titulo_padrao** ‚Äì string formada por  
   \`<classe_abrev> <subclasse_codigo> ‚Äì <title>\`
2. **classe_abrev**
3. **classe_codigo**
4. **classe_nome**
5. **subclasse_codigo**
6. **subclasse_nome**
7. **justificativa** ‚Äì 1 ‚Äì 2 frases citando palavras-chave que sustentam a escolha
8. **content_full** ‚Äì **texto completo** do documento organizado e estruturado.

> **Nada deve ser inclu√≠do fora desse objeto JSON.**  
> N√£o forne√ßa exemplos, nem repita estas instru√ß√µes.

## Regras de decis√£o
1. Priorize *content* > *description* > *title* em caso de diverg√™ncia.
2. Se o documento se encaixar em uma s√≥ subclasse, atribua-a; caso transversal, escolha a que
   melhor represente a **fun√ß√£o principal**.
3. D√∫vida entre duas subclasses da mesma classe ‚Üí opte pela mais espec√≠fica.
4. Se nenhuma subclasse couber, retorne \`null\` em **subclasse_codigo** e **subclasse_nome**,
   mas indique a **classe** pertinente.
5. Empregue exatamente a grafia e abrevia√ß√µes listadas.

## Dicas r√°pidas
- Termos *pre√ßo, etiqueta, margem* ‚Üí 01.04 ou 03.01 (processo interno √ó estrat√©gia de mercado).
- *Evento, campanha, Black Friday, 15 ou Menos* ‚Üí 03.02.
- *Treinamento, v√≠deo, checklist* ‚Üí 06.x.
- *Fornecedor, proced√™ncia, NF-e* ‚Üí 04.x.
- *PIX, GiraCr√©dito, SAC* ‚Üí 05.x.
- *Pol√≠tica corporativa* ‚Üí 00.03.

Execute estritamente conforme instru√ß√µes.`;

const DIRETRIZES_PROMPT = `‚úÖ PROMPT FIXO ‚Äì CLASSIFICADOR INSTITUCIONAL CRESCI E PERDI

Voc√™ √© um classificador institucional da rede Cresci e Perdi, especializado em analisar conte√∫dos operacionais (como regras, e avisos de infra√ß√µes). Sempre que receber um novo conte√∫do, execute esta an√°lise padronizada e retorne obrigatoriamente com as seguintes se√ß√µes:

‚∏ª

üéØ CATEGORIAS OFICIAIS DE CLASSIFICA√á√ÉO (escolher uma √∫nica):
	1.	üîµ Comunica√ß√£o Visual e Est√©tica de Loja
Est√©tica dos produtos, da loja, bastidores, roupas em m√°s condi√ß√µes, cabides, cen√°rio, fantasias, m√≠dia visual.
	2.	üü† Conduta Comercial e Padroniza√ß√£o da Franquia
Infra√ß√µes comerciais, regras institucionais, cria√ß√£o de eventos n√£o autorizados, brindes, linguagem proibida, padroniza√ß√£o geral.
	3.	üü° Precifica√ß√£o e Gest√£o de Produtos
Regras sobre pre√ßo, valor de pe√ßas, reservas, uso de etiquetas, venda sem valor, sistema Giracr√©dito, precifica√ß√£o manual.
	4.	üü£ Produ√ß√£o de Conte√∫do e M√≠dias Sociais
Trends, √°udios, grava√ß√µes, envio de m√≠dias, comportamento em redes sociais, comunica√ß√£o online com clientes.
	5.	üü¢ Avalia√ß√µes e Atendimento ao Fornecedor
Regras de avalia√ß√£o presencial ou online, limites de pe√ßas, atendimento ao fornecedor, tempo da pe√ßa na loja, exibi√ß√£o de dinheiro.
	6.	‚ö™ Regras Institucionais e Opera√ß√£o da Unidade
Abertura ou fechamento sem autoriza√ß√£o, uso indevido de sistema, m√≥veis n√£o homologados, uniforme pr√≥prio, bio institucional fora do padr√£o.

‚∏ª

üß† REGRAS DE EXECU√á√ÉO:
	‚Ä¢	Classifique sempre com apenas uma categoria oficial (obrigat√≥rio).
	‚Ä¢	Retorne somente no formato abaixo, sem explica√ß√µes adicionais.
	‚Ä¢	O conte√∫do pode conter links, listas ou blocos ‚Äî n√£o altere nada, apenas preserve e classifique.
	‚Ä¢	A resposta deve conter quatro partes fixas:

‚∏ª

üßæ FORMATO DE RESPOSTA:

üìå T√≠tulo: [resuma o tema central em at√© 1 linha]

üìÇ Classifica√ß√£o: [emoji + nome da categoria exata]

üß† Justificativa: [resuma em uma frase curta e objetiva o motivo da classifica√ß√£o]

üìÑ Conte√∫do recebido:
[cole o conte√∫do recebido na √≠ntegra, sem altera√ß√µes]

‚∏ª

‚úÖ EXEMPLO DE SA√çDA ESPERADA:

üìå T√≠tulo: Envio de fotos de produtos pelo Instagram

üìÇ Classifica√ß√£o: üü£ Produ√ß√£o de Conte√∫do e M√≠dias Sociais

üß† Justificativa: Trata-se de conduta online proibida relacionada ao envio de imagens pelo direct.

üìÑ Conte√∫do recebido:
[texto original completo]`;

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const bodyData = await req.json();
    console.log('Dados recebidos:', JSON.stringify(bodyData));
    
    const { titulo, conteudo, categoria, tipo, valido_ate, tags, justificativa, artigo_id, force, estilo, process_with_ai } = bodyData;
    
    if (!titulo || !conteudo) {
      console.error('Campos obrigat√≥rios ausentes:', { titulo: !!titulo, conteudo: !!conteudo, justificativa: !!justificativa });
      return new Response(
        JSON.stringify({ 
          error: 'T√≠tulo e conte√∫do s√£o obrigat√≥rios',
          received: { titulo: !!titulo, conteudo: !!conteudo, justificativa: !!justificativa }
        }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!openAIApiKey) {
      console.error('OPENAI_API_KEY n√£o configurada');
      return new Response(
        JSON.stringify({ error: 'OpenAI API Key n√£o configurada no servidor' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('Processando documento:', titulo, 'estilo:', estilo, 'process_with_ai:', process_with_ai);
    console.log('Dados recebidos completos:', JSON.stringify({ titulo, conteudo: conteudo?.substring(0, 100) + '...', categoria, justificativa: justificativa?.substring(0, 50) + '...' }));

    let finalTitulo = titulo;
    let finalConteudo = conteudo;
    let finalCategoria = categoria || 'geral';
    let classificacaoData = null;
    let iaModelo = null;

    // Se tem estilo e deve processar com IA
    if (estilo && process_with_ai && openAIApiKey) {
      console.log('Processando com IA - estilo:', estilo);

      // Get AI settings
      const { data: aiSettings } = await supabase
        .from('faq_ai_settings')
        .select('*')
        .eq('ativo', true)
        .maybeSingle();

      const modelToUse = aiSettings?.modelo_resumo || 'gpt-4o-mini';
      const apiProvider = aiSettings?.api_provider || 'openai';
      iaModelo = modelToUse;
      
      let apiUrl = 'https://api.openai.com/v1/chat/completions';
      let authToken = openAIApiKey;
      
      if (apiProvider === 'lambda' && aiSettings?.api_base_url) {
        apiUrl = `${aiSettings.api_base_url}/chat/completions`;
        authToken = aiSettings.api_key || openAIApiKey;
      }

      if (estilo === 'manual') {
        // ETAPA 1: Organizar documento
        console.log('Organizando documento...');
        
        const organizerResponse = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: modelToUse,
            messages: [
              { role: 'system', content: DOCUMENT_ORGANIZER_PROMPT },
              { role: 'user', content: conteudo }
            ],
            max_tokens: 2000,
            temperature: 0.3
          }),
        });

        if (!organizerResponse.ok) {
          throw new Error(`Document Organizer API error: ${organizerResponse.status}`);
        }

        const organizerResult = await organizerResponse.json();
        const organizedContent = organizerResult.choices[0].message.content;

        console.log('Conte√∫do organizado, classificando...');

        // ETAPA 2: Classificar documento
        const classifierUserMessage = JSON.stringify({
          title: titulo,
          description: '',
          content: organizedContent
        });

        const classifierResponse = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: modelToUse,
            messages: [
              { role: 'system', content: MANUAL_CLASSIFIER_PROMPT + '\n\nIMPORTANTE: No campo content_full, inclua o texto completo organizado recebido. Retorne apenas o JSON sem texto adicional.' },
              { role: 'user', content: classifierUserMessage }
            ],
            response_format: { type: "json_object" },
            max_tokens: 2000,
            temperature: 0.3
          }),
        });

        if (!classifierResponse.ok) {
          throw new Error(`Classifier API error: ${classifierResponse.status}`);
        }

        const classifierResult = await classifierResponse.json();
        const aiResponse = classifierResult.choices[0].message.content;

        try {
          const jsonStart = aiResponse.indexOf('{');
          const jsonEnd = aiResponse.lastIndexOf('}') + 1;
          
          if (jsonStart === -1 || jsonEnd === 0) {
            throw new Error('Nenhum JSON v√°lido encontrado na resposta');
          }
          
          const cleanJson = aiResponse.substring(jsonStart, jsonEnd);
          const jsonResponse = JSON.parse(cleanJson);
          
          finalTitulo = jsonResponse.titulo_padrao || titulo;
          finalConteudo = jsonResponse.content_full || organizedContent || conteudo;
          finalCategoria = jsonResponse.classe_nome || categoria || 'Manual';
          
          classificacaoData = {
            tipo: 'manual',
            classe_abrev: jsonResponse.classe_abrev,
            classe_codigo: jsonResponse.classe_codigo,
            classe_nome: jsonResponse.classe_nome,
            subclasse_codigo: jsonResponse.subclasse_codigo,
            subclasse_nome: jsonResponse.subclasse_nome,
            justificativa: jsonResponse.justificativa,
            conteudo_original: conteudo,
            conteudo_organizado: organizedContent,
            processado_em: new Date().toISOString()
          };
        } catch (e) {
          console.error('Erro ao parsear JSON, usando fallback:', e);
          finalConteudo = organizedContent || conteudo;
          classificacaoData = { 
            tipo: 'manual', 
            processado_em: new Date().toISOString(),
            erro_classificacao: e.message,
            conteudo_original: conteudo,
            conteudo_organizado: organizedContent
          };
        }

      } else if (estilo === 'diretriz') {
        // Processar diretrizes com uma √∫nica IA
        console.log('Processando diretrizes...');
        
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: modelToUse,
            messages: [
              { role: 'system', content: DIRETRIZES_PROMPT },
              { role: 'user', content: conteudo }
            ],
            max_tokens: 2000,
            temperature: 0.3
          }),
        });

        if (!response.ok) {
          throw new Error(`Diretrizes API error: ${response.status}`);
        }

        const result = await response.json();
        const aiResponse = result.choices[0].message.content;

        // Extrair t√≠tulo e categoria da resposta da IA
        const titleMatch = aiResponse.match(/üìå T√≠tulo:\s*(.+)/);
        const categoryMatch = aiResponse.match(/üìÇ Classifica√ß√£o:\s*üü¢\s*(.+)|üìÇ Classifica√ß√£o:\s*üîµ\s*(.+)|üìÇ Classifica√ß√£o:\s*üü†\s*(.+)|üìÇ Classifica√ß√£o:\s*üü°\s*(.+)|üìÇ Classifica√ß√£o:\s*üü£\s*(.+)|üìÇ Classifica√ß√£o:\s*‚ö™\s*(.+)/);
        
        finalTitulo = titleMatch ? titleMatch[1].trim() : titulo;
        finalCategoria = categoryMatch ? (categoryMatch[1] || categoryMatch[2] || categoryMatch[3] || categoryMatch[4] || categoryMatch[5] || categoryMatch[6] || '').trim() : 'Diretrizes Institucionais';
        finalConteudo = aiResponse; // Para diretrizes: resultado da IA
        
        classificacaoData = { 
          tipo: 'diretrizes', 
          conteudo_original: conteudo,
          resultado_diretrizes: aiResponse,
          processado_em: new Date().toISOString() 
        };
      }
    }

    // Preparar texto para embedding
    const textoParaEmbedding = `T√≠tulo: ${finalTitulo}\nConte√∫do: ${typeof finalConteudo === 'string' ? finalConteudo : JSON.stringify(finalConteudo)}`;

    // Gerar embedding usando text-embedding-3-small
    const embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'text-embedding-3-small',
        input: textoParaEmbedding,
      }),
    });

    if (!embeddingResponse.ok) {
      const error = await embeddingResponse.text();
      throw new Error(`Erro na OpenAI Embeddings: ${error}`);
    }

    const embeddingData = await embeddingResponse.json();
    const embedding = embeddingData.data[0].embedding;

    console.log('Embedding gerado, dimens√µes:', embedding.length);

    // Verificar duplicatas usando busca vetorial (apenas se n√£o for√ßado)
    if (!artigo_id && !force) {
      const { data: similares } = await supabase.rpc('match_documentos', {
        query_embedding: embedding,
        match_threshold: 0.85,
        match_count: 3
      });

      if (similares && similares.length > 0) {
        console.log('Documentos similares encontrados:', similares.length);
        return new Response(
          JSON.stringify({ 
            warning: 'duplicate_found',
            similar_documents: similares,
            message: 'Encontramos documentos similares. Deseja criar uma nova vers√£o ou prosseguir?'
          }),
          { 
            status: 409, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }
    }

    // Inserir/Atualizar documento
    const documentData = {
      titulo: finalTitulo,
      conteudo: typeof finalConteudo === 'string' ? { texto: finalConteudo } : finalConteudo,
      categoria: finalCategoria,
      tipo: tipo || 'permanente',
      valido_ate,
      tags: tags || [],
      justificativa,
      criado_por: (await supabase.auth.getUser()).data.user?.id,
      embedding,
      artigo_id: artigo_id || crypto.randomUUID(),
      estilo: estilo || null,
      classificacao: classificacaoData,
      processado_por_ia: !!(estilo && process_with_ai),
      ia_modelo: iaModelo
    };

    if (artigo_id) {
      // Nova vers√£o de artigo existente
      const { data: ultimaVersao } = await supabase
        .from('documentos')
        .select('versao')
        .eq('artigo_id', artigo_id)
        .order('versao', { ascending: false })
        .limit(1)
        .single();

      documentData.versao = (ultimaVersao?.versao || 0) + 1;
    }

    const { data, error } = await supabase
      .from('documentos')
      .insert(documentData)
      .select()
      .single();

    if (error) {
      console.error('Erro ao inserir documento:', error);
      throw error;
    }

    console.log('Documento criado com sucesso:', data.id);

    return new Response(
      JSON.stringify({ 
        success: true, 
        document: data,
        message: artigo_id ? 'Nova vers√£o criada com sucesso' : 'Documento criado com sucesso'
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Erro na fun√ß√£o kb-upsert-document:', error);
    console.error('Stack trace:', error.stack);
    console.error('Erro detalhado:', JSON.stringify(error, Object.getOwnPropertyNames(error)));
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: error.stack,
        type: error.name
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
