
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.55.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const DIRETRIZES_PROMPT = `‚úÖ PROMPT FIXO ‚Äì CLASSIFICADOR INSTITUCIONAL CRESCI E PERDI

Voc√™ √© um classificador institucional da rede Cresci e Perdi, especializado em analisar conte√∫dos operacionais (como regras, e avisos de infra√ß√µes). Sempre que receber um novo conte√∫do, execute esta an√°lise padronizada e retorne obrigatoriamente com as seguintes se√ß√µes:

‚∏ª

üéØ CATEGORIAS OFICIAIS DE CLASSIFICA√á√ÉO (escolher uma √∫nica):
	1.	üîµ Comunica√ß√£o Visual e Est√©tica de Loja
Est√©tica dos produtos, da loja, bastidores, roupas em m√°s condi√ß√µes, cabides, cen√°rio, fantasias, m√≠dia visual.
	2.	üü† Conduta Comercial e Padroniza√ß√£o da Franquia
Infra√ß√µes comerciais, regras institucionais, cria√ß√£o de eventos n√£o autorizados, brindes, linguagem proibida, padroniza√ß√£o geral.
	3.	üü° Precifica√ß√£o e Gest√£o de Produtos
Regras sobre pre√ßo, valor de pe√ßas, reservas, uso de etiquetas, venda sem valor, sistema Giracr√©dito, precifica√ß√£o manual.
	4.	üü£ Produ√ß√£o de Conte√∫do e M√≠dias Sociais
Trends, √°udios, grava√ß√µes, envio de m√≠dias, comportamento em redes sociais, comunica√ß√£o online com clientes.
	5.	üü¢ Avalia√ß√µes e Atendimento ao Fornecedor
Regras de avalia√ß√£o presencial ou online, limites de pe√ßas, atendimento ao fornecedor, tempo da pe√ßa na loja, exibi√ß√£o de dinheiro.
	6.	‚ö™ Regras Institucionais e Opera√ß√£o da Unidade
Abertura ou fechamento sem autoriza√ß√£o, uso indevido de sistema, m√≥veis n√£o homologados, uniforme pr√≥prio, bio institucional fora do padr√£o.

‚∏ª

üß† REGRAS DE EXECU√á√ÉO:
	‚Ä¢	Classifique sempre com apenas uma categoria oficial (obrigat√≥rio).
	‚Ä¢	Retorne somente no formato abaixo, sem explica√ß√µes adicionais.
	‚Ä¢	O conte√∫do pode conter links, listas ou blocos ‚Äî n√£o altere nada, apenas preserve e classifique.
	‚Ä¢	A resposta deve conter quatro partes fixas:

‚∏ª

üßæ FORMATO DE RESPOSTA:

üìå T√≠tulo: [resuma o tema central em at√© 1 linha]

üìÇ Classifica√ß√£o: [emoji + nome da categoria exata]

üß† Justificativa: [resuma em uma frase curta e objetiva o motivo da classifica√ß√£o]

üìÑ Conte√∫do recebido:
[cole o conte√∫do recebido na √≠ntegra, sem altera√ß√µes]

‚∏ª

‚úÖ EXEMPLO DE SA√çDA ESPERADA:

üìå T√≠tulo: Envio de fotos de produtos pelo Instagram

üìÇ Classifica√ß√£o: üü£ Produ√ß√£o de Conte√∫do e M√≠dias Sociais

üß† Justificativa: Trata-se de conduta online proibida relacionada ao envio de imagens pelo direct.

üìÑ Conte√∫do recebido:
[texto original completo]`;

const DOCUMENT_ORGANIZER_PROMPT = `### üéØ MISS√ÉO
Voc√™ atua como **Organizador de Documentos Brutos**, preparando conte√∫dos para uso posterior em:
- IA vetorizada ‚Ä¢ JSON estruturado ‚Ä¢ fluxos de chatbot ‚Ä¢ textos institucionais  

Seu objetivo √© **estruturar, limpar e organizar** o material **sem reescrever nem interpretar** o conte√∫do ‚Äî com as exce√ß√µes expl√≠citas de anonimiza√ß√£o e remo√ß√£o de datas/situa√ß√µes pontuais descritas abaixo.

---

### 1 | TIPOS DE FONTE DE CONTE√öDO  
O texto original pode vir de:  
‚Ä¢ Transcri√ß√µes (v√≠deo/√°udio) ‚Ä¢ Prints de conversa ‚Ä¢ Manuais, listas, anota√ß√µes ‚Ä¢ Conversas informais ou resumos orais  
**Nenhuma parte pode ser omitida**, a menos que a regra de remo√ß√£o abaixo se aplique.

---

### 2 | TAREFAS OBRIGAT√ìRIAS

| N¬∫ | O que fazer | Como fazer |
|----|-------------|------------|
| **2.1** | **Organizar** o material em sequ√™ncia l√≥gica | Insira **t√≠tulos descritivos em negrito** que indiquem o assunto de cada bloco. |
| **2.2** | **Preservar** a linguagem original | N√£o reformule frases; mantenha g√≠rias, oralidade, repeti√ß√µes, etc. |
| **2.3** | **Destacar** partes relevantes | Use **negrito**, *it√°lico*, emojis (‚ö†Ô∏è ‚úÖ üí° üìå) e listas quando ajudar a leitura. |
| **2.4** | **N√£o resumir** | Transcreva tudo integralmente (salvo remo√ß√µes obrigat√≥rias). |
| **2.5** | **Corrigir diverg√™ncias internas** | Se o texto repetir a mesma informa√ß√£o de formas distintas, mantenha apenas a vers√£o **mais coerente ou mais frequente**, sem alterar o sentido. |
| **2.6** | **Anonimizar** | Substitua nomes pr√≥prios por **[nome removido]** ou apague se irrelevantes. |
| **2.7** | **Remover/Anonimizar DATAS e SITUA√á√ïES √öNICAS** | Siga as regras da se√ß√£o 3. |
| **2.8** | **Aplicar substitui√ß√µes de termos** | Use a tabela da se√ß√£o 4. |
| **2.9** | **Entregar conte√∫do pronto** | Siga o formato da se√ß√£o 5. |

---

### 3 | REGRAS DE REMO√á√ÉO DE DATAS & CONTEXTOS N√ÉO RECORRENTES  

1. **Remova** qualquer men√ß√£o expl√≠cita de datas absolutas ou relativas:  
   - Formatos como "12/05/2024", "12-05-24", "12 de maio de 2024", "ontem", "na pr√≥xima ter√ßa-feira", "em dois dias", etc.  
   - Substitua por **[data removida]**.  
2. **Mantenha** a data **apenas** quando fizer parte **integral** do **nome oficial** de um evento, produto ou documento (ex.: "Evento **1¬∫ de Abril**").  
3. **Generalize** ou **remova** refer√™ncias a situa√ß√µes que n√£o se repetir√£o (ex.: "evento rel√¢mpago da Copa de 2018").  
   - Se a informa√ß√£o for imprescind√≠vel ao contexto, troque por **[situa√ß√£o pontual removida]**.  
4. A remo√ß√£o de datas e situa√ß√µes **tem prioridade** sobre a regra "n√£o omitir nada".

---

### 4 | SUBSTITUI√á√ïES OBRIGAT√ìRIAS DE TERMOS  

| Termo original | Substituir por |
|----------------|----------------|
| promo√ß√£o / promo√ß√µes | evento / eventos |
| desconto / descontos | benef√≠cio / benef√≠cios |
| oferta / ofertas | oportunidade / oportunidades |
| Envie uma mensagem no grupo do Concierge / Envie mensagem no GiraBot | *(remover a frase exata; manter o restante da senten√ßa)* |

---

### 5 | FORMATO DE ENTREGA DO CONTE√öDO FINAL  

- Blocos organizados com **t√≠tulos em negrito**.  
- Trechos importantes destacados (negrito, it√°lico, emojis, listas).  
- **Nenhuma parte omitida**, exceto datas e situa√ß√µes cobertas pela se√ß√£o 3.  
- Texto anonimizado e j√° com substitui√ß√µes da se√ß√£o 4 aplicadas.  

---

### 6 | FLUXO DE TRABALHO  

1. Aguarde o(s) texto(s) bruto(s).  
2. Siga integralmente as se√ß√µes 2 ‚Äì 5.  
3. Entregue o conte√∫do reestruturado.  
4. N√£o execute nenhuma outra a√ß√£o nem adicione coment√°rios fora do texto final organizado.  

---

üí° **Dica r√°pida:** se ficar em d√∫vida se algo √© "data" ou "nome de evento", preserve se estiver em mai√∫sculas ou claramente como nome pr√≥prio; caso contr√°rio, remova como data.

**Aguardando conte√∫do para iniciar a organiza√ß√£o.**`;

const MANUAL_CLASSIFIER_PROMPT = `Voc√™ √© um **Classificador Documental S√™nior** respons√°vel por atribuir c√≥digos de classifica√ß√£o
a documentos da rede de franquias *Cresci e Perdi*, usando o plano de classes abaixo
(baseado em ISO 15489 e NBR 13142).

=======================================================================
PLANO DE CLASSES  (abrevia√ß√µes de tr√™s letras)
-----------------------------------------------------------------------
00 Governan√ßa & Estrat√©gia ............. GOV
  00.01 Planejamento Estrat√©gico
  00.02 Expans√£o / Franqueados
  00.03 Pol√≠ticas Corporativas

01 Opera√ß√µes de Loja ................... OPE
  01.01 Atendimento & Experi√™ncia
  01.02 PDV & Caixa
  01.03 Estoque & Invent√°rio
  01.04 Avalia√ß√£o & Precifica√ß√£o
  01.05 Higieniza√ß√£o & Embalagem
  01.06 Layout & Merchandising
  01.07 Seguran√ßa & Incidentes

02 Produtos & Categorias ............... PRO
  02.01 Itens Grandes
  02.02 Vestu√°rio
  02.03 Cal√ßados & Acess√≥rios
  02.04 Brinquedos
  02.05 Kits & Mostru√°rios

03 Marketing & Vendas .................. MKT
  03.01 Estrat√©gias de Pre√ßo
  03.02 Campanhas & Eventos
  03.03 Comunica√ß√£o & Redes Sociais
  03.04 Persona & Segmenta√ß√£o

04 Compras & Fornecedores .............. COM
  04.01 Proced√™ncia & Qualidade
  04.02 Avalia√ß√£o / Negocia√ß√£o de Fornecedores
  04.03 Nota Fiscal & Compliance

05 Suporte & Reclama√ß√µes ............... SUP
  05.01 SAC & Reclame Aqui
  05.02 Concierge / IA de Suporte
  05.03 Pagamentos (PIX / GiraCr√©dito)

06 Treinamento & Desenvolvimento ....... TRE
  06.01 Programas / Trilhas
  06.02 Transcri√ß√µes & V√≠deos
  06.03 Checklists Operacionais

07 Jur√≠dico & Risco .................... JUR
  07.01 Fraudes / Nota Falsa
  07.02 Concorr√™ncia Desleal & Incidentes
  07.03 Pol√≠ticas Fiscais
=======================================================================

## Entrada esperada
- **title**: t√≠tulo do documento sem aspas
- **description**: resumo ou abstract  
- **content** *(opcional)*: texto integral

## Sa√≠da obrigat√≥ria  
Retorne **exclusivamente** um objeto JSON (sem coment√°rios) contendo, nesta ordem:

1. **titulo_padrao** ‚Äì string formada por  
   \`<classe_abrev> <subclasse_codigo> ‚Äì <title>\`
2. **classe_abrev**
3. **classe_codigo**
4. **classe_nome**
5. **subclasse_codigo**
6. **subclasse_nome**
7. **justificativa** ‚Äì 1 ‚Äì 2 frases citando palavras-chave que sustentam a escolha
8. **content_full** ‚Äì **texto completo** do documento recebido (campo *content*).  
   Se *content* n√£o for fornecido, use \`null\`.

> **Nada deve ser inclu√≠do fora desse objeto JSON.**  
> N√£o forne√ßa exemplos, nem repita estas instru√ß√µes.

## Regras de decis√£o
1. Priorize *content* > *description* > *title* em caso de diverg√™ncia.
2. Se o documento se encaixar em uma s√≥ subclasse, atribua-a; caso transversal, escolha a que
   melhor represente a **fun√ß√£o principal**.
3. D√∫vida entre duas subclasses da mesma classe ‚Üí opte pela mais espec√≠fica.
4. Se nenhuma subclasse couber, retorne \`null\` em **subclasse_codigo** e **subclasse_nome**,
   mas indique a **classe** pertinente.
5. Empregue exatamente a grafia e abrevia√ß√µes listadas.

## Dicas r√°pidas
- Termos *pre√ßo, etiqueta, margem* ‚Üí 01.04 ou 03.01 (processo interno √ó estrat√©gia de mercado).
- *Evento, campanha, Black Friday, 15 ou Menos* ‚Üí 03.02.
- *Treinamento, v√≠deo, checklist* ‚Üí 06.x.
- *Fornecedor, proced√™ncia, NF-e* ‚Üí 04.x.
- *PIX, GiraCr√©dito, SAC* ‚Üí 05.x.
- *Pol√≠tica corporativa* ‚Üí 00.03.

Outras regras - 
- nao use palavras como promocao e seu derivados 

Execute estritamente conforme instru√ß√µes.`;

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { estilo, titulo, categoria, content, arquivo_path } = await req.json();

    console.log('Processando nova mem√≥ria:', { estilo, titulo, categoria, arquivo_path });

    if (!estilo || !content) {
      return new Response(
        JSON.stringify({ error: 'Estilo e conte√∫do s√£o obrigat√≥rios' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    let aiResponse = '';
    let organizedContent = content;

    if (estilo === 'manual') {
      // ETAPA 1: Organizar documento com o Document Organizer
      console.log('ETAPA 1: Organizando documento...');
      console.log('Document Organizer prompt length:', DOCUMENT_ORGANIZER_PROMPT.length);
      console.log('Content length:', content.length);

      const organizerResponse = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: DOCUMENT_ORGANIZER_PROMPT },
            { role: 'user', content: content }
          ],
          max_tokens: 2000,
          temperature: 0.3
        }),
      });

      console.log('Document Organizer response status:', organizerResponse.status);

      if (!organizerResponse.ok) {
        const errorText = await organizerResponse.text();
        console.error('Document Organizer API error details:', errorText);
        throw new Error(`Document Organizer API error: ${organizerResponse.status} - ${errorText}`);
      }

      const organizerResult = await organizerResponse.json();
      organizedContent = organizerResult.choices[0].message.content;

      console.log('Conte√∫do organizado (length):', organizedContent?.length || 0);
      console.log('Conte√∫do organizado (first 200 chars):', organizedContent?.substring(0, 200) || 'EMPTY');

      // ETAPA 2: Classificar documento organizado
      console.log('ETAPA 2: Classificando documento...');
      const classifierUserMessage = JSON.stringify({
        title: titulo || 'Documento sem t√≠tulo',
        description: '',
        content: organizedContent
      });

      console.log('Classifier prompt length:', MANUAL_CLASSIFIER_PROMPT.length);
      console.log('Classifier user message length:', classifierUserMessage.length);

      const classifierResponse = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: MANUAL_CLASSIFIER_PROMPT + '\n\nIMPORTANTE: Defina content_full como null para evitar truncamento. Retorne apenas o JSON sem texto adicional.' },
            { role: 'user', content: classifierUserMessage }
          ],
          response_format: { type: "json_object" },
          max_tokens: 2000,
          temperature: 0.3
        }),
      });

      console.log('Classifier response status:', classifierResponse.status);

      if (!classifierResponse.ok) {
        const errorText = await classifierResponse.text();
        console.error('Classifier API error details:', errorText);
        throw new Error(`Classifier API error: ${classifierResponse.status} - ${errorText}`);
      }

      const classifierResult = await classifierResponse.json();
      aiResponse = classifierResult.choices[0].message.content;

      console.log('Resposta do classificador (length):', aiResponse?.length || 0);
      console.log('Resposta do classificador (first 200 chars):', aiResponse?.substring(0, 200) || 'EMPTY');

    } else {
      // DIRETRIZES: Processar com uma √∫nica IA
      console.log('Processando diretrizes com uma √∫nica IA...');
      console.log('Diretrizes prompt length:', DIRETRIZES_PROMPT.length);
      console.log('Content length:', content.length);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: DIRETRIZES_PROMPT },
            { role: 'user', content: content }
          ],
          max_tokens: 2000,
          temperature: 0.3
        }),
      });

      console.log('Diretrizes response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Diretrizes API error details:', errorText);
        throw new Error(`Diretrizes API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      aiResponse = result.choices[0].message.content;

      console.log('Resposta diretrizes (length):', aiResponse?.length || 0);
      console.log('Resposta diretrizes (first 200 chars):', aiResponse?.substring(0, 200) || 'EMPTY');
    }

    // Processar resposta baseada no estilo
    let processedData: any = {};
    
    if (estilo === 'diretrizes') {
      // Para diretrizes, extrair t√≠tulo e categoria da resposta da IA
      const titleMatch = aiResponse.match(/üìå T√≠tulo:\s*(.+)/);
      const categoryMatch = aiResponse.match(/üìÇ Classifica√ß√£o:\s*üü¢\s*(.+)|üìÇ Classifica√ß√£o:\s*üîµ\s*(.+)|üìÇ Classifica√ß√£o:\s*üü†\s*(.+)|üìÇ Classifica√ß√£o:\s*üü°\s*(.+)|üìÇ Classifica√ß√£o:\s*üü£\s*(.+)|üìÇ Classifica√ß√£o:\s*‚ö™\s*(.+)/);
      
      const extractedTitle = titleMatch ? titleMatch[1].trim() : (titulo || 'Diretriz sem t√≠tulo');
      const extractedCategory = categoryMatch ? (categoryMatch[1] || categoryMatch[2] || categoryMatch[3] || categoryMatch[4] || categoryMatch[5] || categoryMatch[6] || '').trim() : (categoria || 'Diretrizes Institucionais');
      
      processedData = {
        conteudo_formatado: aiResponse,
        titulo: extractedTitle,
        categoria: extractedCategory,
        subcategoria: 'Regras e Normas',
        classificacao: { tipo: 'diretrizes', processado_em: new Date().toISOString() }
      };
    } else {
      // Para manual, extrair do JSON do classificador
      try {
        console.log('Tentando parsear JSON do classificador...');
        console.log('Resposta do classificador (completa):', aiResponse);
        
        // Limpar poss√≠vel texto extra antes/depois do JSON
        const jsonStart = aiResponse.indexOf('{');
        const jsonEnd = aiResponse.lastIndexOf('}') + 1;
        
        if (jsonStart === -1 || jsonEnd === 0) {
          throw new Error('Nenhum JSON v√°lido encontrado na resposta');
        }
        
        const cleanJson = aiResponse.substring(jsonStart, jsonEnd);
        console.log('JSON extra√≠do:', cleanJson);
        
        const jsonResponse = JSON.parse(cleanJson);
        
        console.log('JSON parseado com sucesso:', {
          titulo_padrao: jsonResponse.titulo_padrao,
          classe_nome: jsonResponse.classe_nome
        });
        
        // Priorizar content_full do classificador se dispon√≠vel
        const finalContent = jsonResponse.content_full || organizedContent || content;
        
        console.log('Escolhendo conte√∫do final:', {
          tem_content_full: !!jsonResponse.content_full,
          content_full_length: jsonResponse.content_full?.length || 0,
          tem_organized: !!organizedContent,
          organized_length: organizedContent?.length || 0,
          escolhido: jsonResponse.content_full ? 'content_full' : organizedContent ? 'organized' : 'original'
        });
        
        processedData = {
          conteudo_formatado: finalContent,
          titulo: jsonResponse.titulo_padrao || titulo || 'Manual sem t√≠tulo',
          categoria: jsonResponse.classe_nome || categoria || 'Manual',
          subcategoria: jsonResponse.subclasse_nome || null,
          classificacao: {
            tipo: 'manual',
            classe_abrev: jsonResponse.classe_abrev,
            classe_codigo: jsonResponse.classe_codigo,
            classe_nome: jsonResponse.classe_nome,
            subclasse_codigo: jsonResponse.subclasse_codigo,
            subclasse_nome: jsonResponse.subclasse_nome,
            justificativa: jsonResponse.justificativa,
            conteudo_original: content,
            conteudo_organizado: organizedContent,
            processado_em: new Date().toISOString()
          }
        };
      } catch (e) {
        console.error('Erro ao parsear JSON do manual, usando fallback regex:', e);
        console.log('Tentando extrair t√≠tulo e categoria com regex...');
        
        // Fallback inteligente: extrair t√≠tulo e categoria usando regex
        const tituloMatch = aiResponse.match(/"titulo_padrao":\s*"([^"]+)"/);
        const categoriaMatch = aiResponse.match(/"classe_nome":\s*"([^"]+)"/);
        
        const extractedTitulo = tituloMatch ? tituloMatch[1] : (titulo || 'Manual sem t√≠tulo');
        const extractedCategoria = categoriaMatch ? categoriaMatch[1] : (categoria || 'Manual');
        
        console.log('Valores extra√≠dos por regex:', {
          titulo: extractedTitulo,
          categoria: extractedCategoria
        });
        
        processedData = {
          conteudo_formatado: organizedContent || content,
          titulo: extractedTitulo,
          categoria: extractedCategoria,
          subcategoria: null,
          classificacao: { 
            tipo: 'manual', 
            processado_em: new Date().toISOString(),
            resposta_bruta: aiResponse,
            metodo_extracao: 'regex_fallback'
          }
        };
      }
    }

    // Salvar na base de conhecimento
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    const { data, error } = await supabase
      .from('knowledge_articles')
      .insert({
        titulo: processedData.titulo,
        conteudo: processedData.conteudo_formatado,
        categoria: processedData.categoria,
        subcategoria: processedData.subcategoria,
        estilo: estilo,
        classificacao: processedData.classificacao,
        arquivo_path: arquivo_path || null,
        tipo_midia: 'texto',
        aprovado: false,
        usado_pela_ia: false,
        ativo: true
      })
      .select()
      .single();

    if (error) {
      console.error('Erro ao salvar na base:', error);
      throw new Error(`Erro ao salvar: ${error.message}`);
    }

    console.log('Mem√≥ria criada com sucesso:', data.id);

    return new Response(
      JSON.stringify({ 
        success: true, 
        memoria_id: data.id,
        titulo: data.titulo,  // Usar o t√≠tulo que foi salvo no banco
        categoria: data.categoria,  // Usar a categoria que foi salva no banco
        subcategoria: data.subcategoria
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Erro na fun√ß√£o kb-create-memory:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
