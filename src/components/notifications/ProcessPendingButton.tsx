import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { RefreshCw } from 'lucide-react';
export const ProcessPendingButton: React.FC = () => {
  const [isProcessing, setIsProcessing] = useState(false);
  const {
    toast
  } = useToast();
  const handleProcessPending = async () => {
    try {
      setIsProcessing(true);
      console.log('üîÑ Processando notifica√ß√µes pendentes retroativamente...');
      
      const { data: pendingNotifications, error: fetchError } = await supabase
        .from('notifications_queue')
        .select('*')
        .eq('status', 'pending')
        .order('created_at', { ascending: true });

      if (fetchError) {
        console.error('‚ùå Erro ao buscar notifica√ß√µes:', fetchError);
        throw fetchError;
      }

      if (!pendingNotifications || pendingNotifications.length === 0) {
        toast({
          title: "Nenhuma notifica√ß√£o pendente",
          description: "N√£o h√° notifica√ß√µes para processar",
          variant: "default"
        });
        return;
      }

      console.log(`üìã Encontradas ${pendingNotifications.length} notifica√ß√µes pendentes`);

      // Atualizar status para for√ßar reprocessamento via trigger
      const { error: updateError } = await supabase
        .from('notifications_queue')
        .update({ status: 'pending', updated_at: new Date().toISOString() })
        .eq('status', 'pending')
        .in('id', pendingNotifications.map(n => n.id));

      if (updateError) {
        console.error('‚ùå Erro ao atualizar notifica√ß√µes:', updateError);
        throw updateError;
      }

      toast({
        title: "Notifica√ß√µes Reprocessadas",
        description: `${pendingNotifications.length} notifica√ß√µes foram enviadas para reprocessamento`,
        variant: "default"
      });
    } catch (error: any) {
      console.error('üí• Erro ao processar notifica√ß√µes pendentes:', error);
      toast({
        title: "Erro",
        description: `Erro ao processar notifica√ß√µes: ${error.message || 'Erro desconhecido'}`,
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };
  return (
    <Button
      onClick={handleProcessPending}
      disabled={isProcessing}
      variant="outline"
      size="sm"
    >
      <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />
    </Button>
  );
};