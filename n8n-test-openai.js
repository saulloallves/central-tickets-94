// C√ìDIGO PARA N8N - TESTAR OPENAI API KEY
// Cole este c√≥digo em um n√≥ "Code" no N8N

// 1. DEFINA SUA CHAVE OPENAI AQUI:
const OPENAI_API_KEY = 'sua-chave-openai-aqui';

// 2. FUN√á√ÉO DE TESTE
async function testOpenAI() {
  console.log('üîë Testando OpenAI API Key...');
  console.log('Chave existe:', !!OPENAI_API_KEY);
  console.log('Tamanho da chave:', OPENAI_API_KEY ? OPENAI_API_KEY.length : 0);
  console.log('Primeiros 10 caracteres:', OPENAI_API_KEY ? OPENAI_API_KEY.substring(0, 10) : 'null');
  
  if (!OPENAI_API_KEY || OPENAI_API_KEY === 'sua-chave-openai-aqui') {
    throw new Error('‚ùå ERRO: Defina sua chave OpenAI no c√≥digo!');
  }

  try {
    // TESTE 1: Listar modelos
    console.log('\nüìã Testando listagem de modelos...');
    
    const modelsResponse = await fetch('https://api.openai.com/v1/models', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'User-Agent': 'N8N Test'
      }
    });

    console.log('Status modelos:', modelsResponse.status);
    
    if (modelsResponse.status !== 200) {
      const errorText = await modelsResponse.text();
      throw new Error(`‚ùå ERRO na listagem de modelos: ${modelsResponse.status} - ${errorText}`);
    }

    const modelsData = await modelsResponse.json();
    console.log('‚úÖ SUCCESS! Modelos encontrados:', modelsData.data.length);
    console.log('Alguns modelos:', modelsData.data.slice(0, 3).map(m => m.id));

    // TESTE 2: Embedding
    console.log('\nüîó Testando embedding...');
    
    const embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'text-embedding-3-small',
        input: 'Este √© um teste de embedding no N8N'
      })
    });

    console.log('Status embedding:', embeddingResponse.status);
    
    if (embeddingResponse.status !== 200) {
      const errorText = await embeddingResponse.text();
      throw new Error(`‚ùå ERRO no embedding: ${embeddingResponse.status} - ${errorText}`);
    }

    const embeddingData = await embeddingResponse.json();
    console.log('‚úÖ Embedding SUCCESS!');
    console.log('Dimens√µes:', embeddingData.data[0].embedding.length);
    console.log('Primeiros valores:', embeddingData.data[0].embedding.slice(0, 5));

    // TESTE 3: Chat Completion (opcional)
    console.log('\nüí¨ Testando chat completion...');
    
    const chatResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'user', content: 'Diga "Teste OK" se voc√™ recebeu esta mensagem.' }
        ],
        max_tokens: 10
      })
    });

    if (chatResponse.status === 200) {
      const chatData = await chatResponse.json();
      console.log('‚úÖ Chat SUCCESS!');
      console.log('Resposta:', chatData.choices[0].message.content);
    }

    return {
      success: true,
      message: 'üéâ CHAVE OPENAI EST√Å FUNCIONANDO PERFEITAMENTE!',
      tests: {
        models: '‚úÖ OK',
        embedding: '‚úÖ OK',
        chat: chatResponse.status === 200 ? '‚úÖ OK' : '‚ö†Ô∏è Parcial'
      }
    };

  } catch (error) {
    console.error('‚ùå ERRO:', error.message);
    return {
      success: false,
      error: error.message,
      message: '‚ùå Chave OpenAI com problema'
    };
  }
}

// EXECUTAR TESTE E RETORNAR RESULTADO
return await testOpenAI();